{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","preventSwipe","style","backgroundImage","url","name","SwipeButtons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","type","placeholder","preventDefault","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f8c7f7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nfunction Header( {backButton}) {\r\n\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"header\">\r\n\r\n            {backButton ? (\r\n                <IconButton onClick={()=> history.replace(backButton)}>\r\n                <ArrowBackIosIcon fontSize=\"large\" className=\"header_icon\" />\r\n                </IconButton>\r\n                \r\n            ): (\r\n                <IconButton>\r\n            <PersonIcon className=\"header_icon\" fontSize=\"large\" />\r\n\r\n            </IconButton>\r\n\r\n            )}\r\n\r\n\r\n            \r\n            <Link to=\"/\">\r\n            <img className=\"header_logo\" src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\" alt=\"tinder logo\"/>\r\n            </Link>\r\n            <Link to=\"/chat\">\r\n            <IconButton>\r\n            <QuestionAnswerIcon className=\"header_icon\" fontSize=\"large\"/>\r\n\r\n\r\n            </IconButton>\r\n            </Link>\r\n            \r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import firebase from \"firebase\";\r\n//import * as firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAeFiwDGlTU2KAGUJ9zDo5y66B9F3jf86w\",\r\n    authDomain: \"tinder-clone-eaa50.firebaseapp.com\",\r\n    databaseURL: \"https://tinder-clone-eaa50.firebaseio.com\",\r\n    projectId: \"tinder-clone-eaa50\",\r\n    storageBucket: \"tinder-clone-eaa50.appspot.com\",\r\n    messagingSenderId: \"960312951062\",\r\n    appId: \"1:960312951062:web:36ec2018d1a1ae02891037\",\r\n    measurementId: \"G-KPS0S5Y9H1\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  const database = firebaseApp.firestore();\r\n\r\n  export default database;","\r\nimport TinderCard from 'react-tinder-card';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './TinderCards.css';\r\nimport database from \"./firebase\";\r\n\r\n\r\n\r\n\r\nfunction TinderCards() {\r\n//const people = [];\r\n//people.push('ruchir','kritik');\r\n//setPeople([...people, 'ruvhir']) --react way of pushing elemnts in a list\r\nconst [people, setPeople] = useState([]);\r\n        //piece of code that runs on the condition\r\n        useEffect(() => {\r\n\r\n            //runs once when component loads and never again\r\n\r\n           const unsubscribe = database\r\n           .collection('people')\r\n           .onSnapshot(snapshot => (\r\n                setPeople(snapshot.docs.map(doc => doc.data()))\r\n            ));\r\n\r\n            return () => {\r\n                unsubscribe();\r\n            };\r\n\r\n        }, []);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n           \r\n           <div className=\"tinderCard_cardContainer\" >\r\n\r\n            {people.map(person => (\r\n                <TinderCard\r\n                    className=\"swipe\"\r\n                    key={person.name}\r\n                    preventSwipe={['up','down']}\r\n                \r\n                \r\n                >\r\n                    <div \r\n                    style={{ backgroundImage: `url(${person.url})` }}\r\n                    className=\"card\">\r\n                        <h3>{person.name}</h3>\r\n\r\n\r\n                    </div>\r\n\r\n                </TinderCard>\r\n            ))}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TinderCards\r\n","import React from 'react'\r\nimport  './SwipeButtons.css';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport StarRateIcon from '@material-ui/icons/StarRate';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nfunction SwipeButtons() {\r\n    return (\r\n        <div className=\"swipeButtons\">\r\n            <IconButton className=\"swipeButtons_repeat\">\r\n            <ReplayIcon  fontSize=\"large\"  />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_close\">\r\n            <CloseIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_star\">\r\n            <StarRateIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_fav\">\r\n            <FavoriteIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_flash\">\r\n            <FlashOnIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons\r\n","import React from 'react';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport './Chat.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Chat({name, message, profilePic, timestamp}) {\r\n    return (\r\n        <Link to={`/chat/${name}`} >\r\n        <div className=\"chat\">\r\n            <Avatar className=\"chat_image\" alt={name} src={profilePic} />\r\n            <div className=\"chat_details\">\r\n                <h2>{name}</h2>\r\n                <p>{message}</p>\r\n                </div>\r\n\r\n                <p className=\"chat_timestamp\">{timestamp}</p>\r\n            \r\n            \r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport './Chats.css';\r\nimport Chat from './Chat';\r\n\r\nfunction Chats() {\r\n    return (\r\n        <div>\r\n            <Chat\r\n            name=\"Rashmika\"\r\n            message=\"Hey!\"\r\n            timestamp=\"35 minutes ago\"\r\n            profilePic=\"https://static.toiimg.com/photo/msid-77358838/77358838.jpg?158025\"\r\n\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React, {useState} from 'react';\r\nimport './ChatScreen.css';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nfunction ChatScreen() {\r\n\r\n const [input, setInput] = useState('');   \r\nconst [messages, setMessages] = useState([\r\n    {\r\n        name: 'Rashmika',\r\n        image: 'https://static.toiimg.com/photo/msid-77358838/77358838.jpg?158025',\r\n        message: 'Hey! '\r\n    },\r\n    {\r\n        name: 'Rashmika',\r\n        image: 'https://static.toiimg.com/photo/msid-77358838/77358838.jpg?158025',\r\n        message: 'how is it going..'\r\n    },\r\n\r\n    {\r\n        message: 'Hey! Rashmika. I am a big Fan!'\r\n    },\r\n]);\r\n\r\n\r\nconst handleSend = e => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { message : input}]);\r\n    setInput(\"\");\r\n};\r\n\r\n    return (\r\n        <div className=\"chatScreen\">\r\n\r\n            <p className=\"chatScreen_timestamp\">You Matched with Rashmika on 22/11/2020</p>\r\n\r\n            \r\n\r\n\r\n            {messages.map(message => (\r\n\r\n                message.name ? (\r\n                <div className=\"chatScreen_message\">\r\n                    <Avatar className=\"chatScreen_image\" alt={message.name} src={message.image} />\r\n                    <p className=\"chatScreen_text\">{message.message}</p>\r\n                </div>\r\n                ) : (\r\n                    <div className=\"chatScreen_message\">\r\n                    <p className=\"chatScreen_textUser\">{message.message}</p>\r\n                    </div>\r\n\r\n                )\r\n\r\n            ))\r\n\r\n            }\r\n\r\n           \r\n\r\n                <form className=\"chatScreen_Input\">\r\n\r\n                    <input \r\n\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value) }\r\n                    type=\"text\" placeholder=\"Type a message...\" className=\"chatScreen_InputField\" />\r\n                    <button onClick={handleSend} className=\"chatScreen_Send\" type=\"submit\">SEND</button>\r\n\r\n\r\n\r\n                </form>\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatScreen\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  \n} from \"react-router-dom\";\nimport TinderCards from './TinderCards';\nimport SwipeButtons from './SwipeButtons';\nimport Chats from './Chats';\nimport ChatScreen from './ChatScreen';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       \n       \n\n\n      <Router>\n       \n\n     \n\n    \n    \n\n    {/*Buttons*/}\n    <Switch>\n\n\n    <Route path=\"/chat/:person\">\n      <Header backButton=\"/chat\" />\n      <ChatScreen />\n    </Route>\n\n\n\n\n\n    <Route path=\"/chat\">\n      <Header backButton=\"/\" />\n      <Chats />\n    </Route>\n\n    \n\n    <Route path=\"/\">\n      <Header />\n      <TinderCards />\n\n      <SwipeButtons />\n\n      \n\n    </Route>\n\n\n    </Switch>\n\n\n\n\n\n      </Router>\n\n\n      \n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}